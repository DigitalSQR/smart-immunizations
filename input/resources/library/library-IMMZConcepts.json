{
  "resourceType": "Library",
  "id": "IMMZConcepts",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/smart-immunization/Library/IMMZConcepts",
  "name": "IMMZConcepts",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "Code system ICD-10",
    "resource": "http://hl7.org/fhir/sid/icd-10"
  }, {
    "type": "depends-on",
    "display": "Code system SNOMED-CT",
    "resource": "http://snomed.info/sct"
  }, {
    "type": "depends-on",
    "display": "Code system LOINC",
    "resource": "http://loinc.org"
  }, {
    "type": "depends-on",
    "display": "Code system RxNorm",
    "resource": "http://www.nlm.nih.gov/research/umls/rxnorm"
  }, {
    "type": "depends-on",
    "display": "Code system CIEL",
    "resource": "http://hl7.org/fhir/sid/ciel"
  }, {
    "type": "depends-on",
    "display": "Code system ICD-11",
    "resource": "http://hl7.org/fhir/sid/icd-11"
  }, {
    "type": "depends-on",
    "display": "Code system ICHI",
    "resource": "https://mitel.dimi.uniud.it/ichi/#http://id.who.int/ichi"
  }, {
    "type": "depends-on",
    "display": "Code system ICF",
    "resource": "http://hl7.org/fhir/sid/icf-nl"
  }, {
    "type": "depends-on",
    "display": "Code system Extended Codes CodeSystem codes",
    "resource": "http://fhir.org/guides/who/anc-cds/CodeSystem/anc-custom-codes"
  }, {
    "type": "depends-on",
    "display": "Value set WHO ATC",
    "resource": "http://hl7.org/fhir/uv/ips/ValueSet/whoatc-uv-ips"
  }, {
    "type": "depends-on",
    "display": "Value set Negative Result",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/negativetestresult-values"
  }, {
    "type": "depends-on",
    "display": "Value set Positive Result",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/PositiveTestResult-values"
  }, {
    "type": "depends-on",
    "display": "Value set CD4% Test Result",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/CD4percentageTest-values"
  }, {
    "type": "depends-on",
    "display": "Value set CD4 Count Test Result",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/CD4CountTestResult-values"
  }, {
    "type": "depends-on",
    "display": "Value set Immunocompromised",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/Immunocompromised-values"
  }, {
    "type": "depends-on",
    "display": "Value set Patient birth weight observation value",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/Birthweight-values"
  }, {
    "type": "depends-on",
    "display": "Value set Seronegative",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/Seronegative-values"
  }, {
    "type": "depends-on",
    "display": "Value set PretermBirth",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/Preterm-values"
  }, {
    "type": "depends-on",
    "display": "Value set HIV status",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-b9-de45"
  }, {
    "type": "depends-on",
    "display": "Value set HIV status - HIV positive Choices",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-b9-de46"
  }, {
    "type": "depends-on",
    "display": "Value set HIV status - HIV negative Choices",
    "resource": "http://fhir.org/guides/who/anc-cds/ValueSet/anc-b9-de47"
  }, {
    "type": "depends-on",
    "display": "Value set TST Test Result",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/TSTTestResult-values"
  }, {
    "type": "depends-on",
    "display": "Value set IGRA Test Result",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/IGRATestResult-values"
  }, {
    "type": "depends-on",
    "display": "Value set ARV Drugs",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/ARVDrugs-values"
  }, {
    "type": "depends-on",
    "display": "Value set VNA levels",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/VNAlevelsRAbies-values"
  }, {
    "type": "depends-on",
    "display": "Value set Inactivated Vero cell-derived Japanese Encephalitis vaccines",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/InactivatedJE-values"
  }, {
    "type": "depends-on",
    "display": "Value set Target Disease",
    "resource": "http://hl7.org/fhir/ValueSet/immunization-target-disease"
  }, {
    "type": "depends-on",
    "display": "Value set BCG Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE1"
  }, {
    "type": "depends-on",
    "display": "Value set Cholera Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE2"
  }, {
    "type": "depends-on",
    "display": "Value set Diphtheria Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE3"
  }, {
    "type": "depends-on",
    "display": "Value set Hib Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE4"
  }, {
    "type": "depends-on",
    "display": "Value set HepA Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE5"
  }, {
    "type": "depends-on",
    "display": "Value set HepB Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE6"
  }, {
    "type": "depends-on",
    "display": "Value set HPV Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE7"
  }, {
    "type": "depends-on",
    "display": "Value set Japanese Encephalitis Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE8"
  }, {
    "type": "depends-on",
    "display": "Value set MCV Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE9"
  }, {
    "type": "depends-on",
    "display": "Value set Meningococcal Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE10"
  }, {
    "type": "depends-on",
    "display": "Value set Mumps Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE11"
  }, {
    "type": "depends-on",
    "display": "Value set Pertussis Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE12"
  }, {
    "type": "depends-on",
    "display": "Value set Pneumococcal Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE13"
  }, {
    "type": "depends-on",
    "display": "Value set Polio Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE14"
  }, {
    "type": "depends-on",
    "display": "Value set Rabies Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE15"
  }, {
    "type": "depends-on",
    "display": "Value set Rotavirus Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE16"
  }, {
    "type": "depends-on",
    "display": "Value set Rubella Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE17"
  }, {
    "type": "depends-on",
    "display": "Value set Seasonal Influenza Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE18"
  }, {
    "type": "depends-on",
    "display": "Value set Tetanus Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE19"
  }, {
    "type": "depends-on",
    "display": "Value set Typhoid Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE21"
  }, {
    "type": "depends-on",
    "display": "Value set TBE Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE20"
  }, {
    "type": "depends-on",
    "display": "Value set Varicella Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE22"
  }, {
    "type": "depends-on",
    "display": "Value set Yellow Fever Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE23"
  }, {
    "type": "depends-on",
    "display": "Value set DTP Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE24"
  }, {
    "type": "depends-on",
    "display": "Value set Inactivated Polio Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE25"
  }, {
    "type": "depends-on",
    "display": "Value set Oral Polio Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE26"
  }, {
    "type": "depends-on",
    "display": "Value set Dengue Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE27"
  }, {
    "type": "depends-on",
    "display": "Value set Inactivated HAV",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE28"
  }, {
    "type": "depends-on",
    "display": "Value set WC Class Cholera Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/WCClassCholeraVaccine-values"
  }, {
    "type": "depends-on",
    "display": "Value set WC-rBS Class Cholera Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/WC-rBSClassCholeraVaccine-values"
  }, {
    "type": "depends-on",
    "display": "Value set ViPS Class Typhoid Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/ViPSClassTyphoidVaccine-values"
  }, {
    "type": "depends-on",
    "display": "Value set Ty21a Class Typhoid Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/Ty21aClassTyphoidVaccine-values"
  }, {
    "type": "depends-on",
    "display": "Value set MenA conjugate vaccine (5Âµg)",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/MenAconjugatevaccine-values"
  }, {
    "type": "depends-on",
    "display": "Value set monovalent MenC conjugate",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/monovalentMenCconjugate-values"
  }, {
    "type": "depends-on",
    "display": "Value set Quadrivalent conjugate",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/Quadrivalentconjugate-values"
  }, {
    "type": "depends-on",
    "display": "Value set FSME-Immun Class TBE Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/FSME-ImmunClassTBEVaccine-values"
  }, {
    "type": "depends-on",
    "display": "Value set TBE-Moscow Class TBE Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/TBE-MoscowClassTBEVaccine-values"
  }, {
    "type": "depends-on",
    "display": "Value set EnceVir Class TBE Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/EnceVirClassTBEVaccine-values"
  }, {
    "type": "depends-on",
    "display": "Value set Encepur Class TBE Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/EncepurClassTBEVaccine-values"
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBJTU1aQ29uY2VwdHMNCg0KLy8gQ29kZSBTeXN0ZW1zDQovL1Byb2JhYmx5IGNhbiBkZWxldGUgdGhlc2Ugb25jZSBpbXBvcnRlZCBXSE9Db25jZXB0cw0KY29kZXN5c3RlbSAiSUNELTEwIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvc2lkL2ljZC0xMCcNCmNvZGVzeXN0ZW0gIlNOT01FRC1DVCI6ICdodHRwOi8vc25vbWVkLmluZm8vc2N0Jw0KY29kZXN5c3RlbSAiTE9JTkMiOiAnaHR0cDovL2xvaW5jLm9yZycNCmNvZGVzeXN0ZW0gIlJ4Tm9ybSI6ICdodHRwOi8vd3d3Lm5sbS5uaWguZ292L3Jlc2VhcmNoL3VtbHMvcnhub3JtJw0KY29kZXN5c3RlbSAiQ0lFTCI6ICdodHRwOi8vaGw3Lm9yZy9maGlyL3NpZC9jaWVsJw0KY29kZXN5c3RlbSAiSUNELTExIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvc2lkL2ljZC0xMScNCmNvZGVzeXN0ZW0gIklDSEkiOiAnaHR0cHM6Ly9taXRlbC5kaW1pLnVuaXVkLml0L2ljaGkvI2h0dHA6Ly9pZC53aG8uaW50L2ljaGknDQpjb2Rlc3lzdGVtICJJQ0YiOiAnaHR0cDovL2hsNy5vcmcvZmhpci9zaWQvaWNmLW5sJw0KY29kZXN5c3RlbSAiRXh0ZW5kZWQgQ29kZXMgQ29kZVN5c3RlbSBjb2RlcyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9hbmMtY2RzL0NvZGVTeXN0ZW0vYW5jLWN1c3RvbS1jb2RlcycNCg0KLy9XSE8gQVRDIElQUyBWYWx1ZXNldA0KdmFsdWVzZXQgIldITyBBVEMiOiAnaHR0cDovL2hsNy5vcmcvZmhpci91di9pcHMvVmFsdWVTZXQvd2hvYXRjLXV2LWlwcycNCg0KLy8gR2VuZXJhbCB1c2UgVmFsdWVTZXRzIA0KdmFsdWVzZXQgIk5lZ2F0aXZlIFJlc3VsdCI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6YXRpb24vVmFsdWVTZXQvbmVnYXRpdmV0ZXN0cmVzdWx0LXZhbHVlcycNCnZhbHVlc2V0ICJQb3NpdGl2ZSBSZXN1bHQiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L1Bvc2l0aXZlVGVzdFJlc3VsdC12YWx1ZXMnDQp2YWx1ZXNldCAiQ0Q0JSBUZXN0IFJlc3VsdCI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6YXRpb24vVmFsdWVTZXQvQ0Q0cGVyY2VudGFnZVRlc3QtdmFsdWVzJw0KdmFsdWVzZXQgIkNENCBDb3VudCBUZXN0IFJlc3VsdCI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6YXRpb24vVmFsdWVTZXQvQ0Q0Q291bnRUZXN0UmVzdWx0LXZhbHVlcycNCnZhbHVlc2V0ICJJbW11bm9jb21wcm9taXNlZCI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6YXRpb24vVmFsdWVTZXQvSW1tdW5vY29tcHJvbWlzZWQtdmFsdWVzJw0KdmFsdWVzZXQgIlBhdGllbnQgYmlydGggd2VpZ2h0IG9ic2VydmF0aW9uIHZhbHVlIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXphdGlvbi9WYWx1ZVNldC9CaXJ0aHdlaWdodC12YWx1ZXMnDQp2YWx1ZXNldCAiU2Vyb25lZ2F0aXZlIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXphdGlvbi9WYWx1ZVNldC9TZXJvbmVnYXRpdmUtdmFsdWVzJw0KdmFsdWVzZXQgIlByZXRlcm1CaXJ0aCI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6YXRpb24vVmFsdWVTZXQvUHJldGVybS12YWx1ZXMnDQoNCi8vIFRPRE8gOiBBZGFwdCBmcm9tIEFOQw0KdmFsdWVzZXQgIkhJViBzdGF0dXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vYW5jLWNkcy9WYWx1ZVNldC9hbmMtYjktZGU0NScNCnZhbHVlc2V0ICJISVYgc3RhdHVzIC0gSElWIHBvc2l0aXZlIENob2ljZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vYW5jLWNkcy9WYWx1ZVNldC9hbmMtYjktZGU0NicNCnZhbHVlc2V0ICJISVYgc3RhdHVzIC0gSElWIG5lZ2F0aXZlIENob2ljZXMiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vYW5jLWNkcy9WYWx1ZVNldC9hbmMtYjktZGU0NycNCg0KLy8gVmFjY2luZSBzcGVjaWZpYyBWYWx1ZVNldHMNCi8vQkNHIHNwZWNpZmljIFZhbHVTZXRzDQp2YWx1ZXNldCAiVFNUIFRlc3QgUmVzdWx0IjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXphdGlvbi9WYWx1ZVNldC9UU1RUZXN0UmVzdWx0LXZhbHVlcycNCnZhbHVlc2V0ICJJR1JBIFRlc3QgUmVzdWx0IjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXphdGlvbi9WYWx1ZVNldC9JR1JBVGVzdFJlc3VsdC12YWx1ZXMnDQp2YWx1ZXNldCAiQVJWIERydWdzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXphdGlvbi9WYWx1ZVNldC9BUlZEcnVncy12YWx1ZXMnDQp2YWx1ZXNldCAiVk5BIGxldmVscyI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6YXRpb24vVmFsdWVTZXQvVk5BbGV2ZWxzUkFiaWVzLXZhbHVlcycNCg0KLy8gSkUgQ2xhc3NpZmljYXRpb24gDQp2YWx1ZXNldCAiSW5hY3RpdmF0ZWQgVmVybyBjZWxsLWRlcml2ZWQgSmFwYW5lc2UgRW5jZXBoYWxpdGlzIHZhY2NpbmVzIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXphdGlvbi9WYWx1ZVNldC9JbmFjdGl2YXRlZEpFLXZhbHVlcycNCg0KdmFsdWVzZXQgIlRhcmdldCBEaXNlYXNlIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvaW1tdW5pemF0aW9uLXRhcmdldC1kaXNlYXNlJw0KDQovLyBWYWNjaW5lIFZhbHVlIFNldHMNCnZhbHVlc2V0ICJCQ0cgVmFjY2luZSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6ZS9WYWx1ZVNldC9JTU1aLkExLkRFMScNCnZhbHVlc2V0ICJDaG9sZXJhIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTInDQp2YWx1ZXNldCAiRGlwaHRoZXJpYSBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUzJw0KdmFsdWVzZXQgIkhpYiBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREU0Jw0KdmFsdWVzZXQgIkhlcEEgVmFjY2luZSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6ZS9WYWx1ZVNldC9JTU1aLkExLkRFNScNCnZhbHVlc2V0ICJIZXBCIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTYnDQp2YWx1ZXNldCAiSFBWIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTcnDQp2YWx1ZXNldCAiSmFwYW5lc2UgRW5jZXBoYWxpdGlzIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTgnDQp2YWx1ZXNldCAiTUNWIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTknDQp2YWx1ZXNldCAiTWVuaW5nb2NvY2NhbCBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUxMCcNCnZhbHVlc2V0ICJNdW1wcyBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUxMScNCnZhbHVlc2V0ICJQZXJ0dXNzaXMgVmFjY2luZSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6ZS9WYWx1ZVNldC9JTU1aLkExLkRFMTInDQp2YWx1ZXNldCAiUG5ldW1vY29jY2FsIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTEzJw0KdmFsdWVzZXQgIlBvbGlvIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTE0Jw0KdmFsdWVzZXQgIlJhYmllcyBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUxNScNCnZhbHVlc2V0ICJSb3RhdmlydXMgVmFjY2luZSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6ZS9WYWx1ZVNldC9JTU1aLkExLkRFMTYnDQp2YWx1ZXNldCAiUnViZWxsYSBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUxNycNCnZhbHVlc2V0ICJTZWFzb25hbCBJbmZsdWVuemEgVmFjY2luZSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6ZS9WYWx1ZVNldC9JTU1aLkExLkRFMTgnDQp2YWx1ZXNldCAiVGV0YW51cyBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUxOScNCnZhbHVlc2V0ICJUeXBob2lkIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTIxJw0KdmFsdWVzZXQgIlRCRSBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUyMCcNCnZhbHVlc2V0ICJWYXJpY2VsbGEgVmFjY2luZSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6ZS9WYWx1ZVNldC9JTU1aLkExLkRFMjInDQp2YWx1ZXNldCAiWWVsbG93IEZldmVyIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTIzJw0KdmFsdWVzZXQgIkRUUCBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUyNCcNCnZhbHVlc2V0ICJJbmFjdGl2YXRlZCBQb2xpbyBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUyNScNCnZhbHVlc2V0ICJPcmFsIFBvbGlvIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTI2Jw0KdmFsdWVzZXQgIkRlbmd1ZSBWYWNjaW5lIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXplL1ZhbHVlU2V0L0lNTVouQTEuREUyNycNCnZhbHVlc2V0ICJJbmFjdGl2YXRlZCBIQVYiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemUvVmFsdWVTZXQvSU1NWi5BMS5ERTI4Jw0KDQoNCmNvZGUgIkFkdmVyc2UgRXZlbnQgU2V2ZXJpdHkiOiAnMjQ2MTEyMDA1JyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ1NldmVyaXR5IChhdHRyaWJ1dGUpJw0KY29kZSAiQWR2ZXJzZSBFdmVudCBNYW5pZmVzdGF0aW9uIjogJzI0NjExMjAwNScgZnJvbSAiU05PTUVELUNUIiBkaXNwbGF5ICdTZXZlcml0eSAoYXR0cmlidXRlKScNCmNvZGUgIlNpY2tsZS1jZWxsIERpc2Vhc2UgQ29uZGl0aW9uIjogJzEyNzA0MDAwMycgZnJvbSAiU05PTUVELUNUIiBkaXNwbGF5ICdTaWNrbGUgY2VsbC1oZW1vZ2xvYmluIFNTIGRpc2Vhc2UgKGRpc29yZGVyKScNCg0KLy8gQ2hvbGVyYSB2YWNjaW5lIGNsYXNzZXMNCnZhbHVlc2V0ICJXQyBDbGFzcyBDaG9sZXJhIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L1dDQ2xhc3NDaG9sZXJhVmFjY2luZS12YWx1ZXMnDQp2YWx1ZXNldCAiV0MtckJTIENsYXNzIENob2xlcmEgVmFjY2luZSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6YXRpb24vVmFsdWVTZXQvV0MtckJTQ2xhc3NDaG9sZXJhVmFjY2luZS12YWx1ZXMnDQp2YWx1ZXNldCAiVmlQUyBDbGFzcyBUeXBob2lkIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L1ZpUFNDbGFzc1R5cGhvaWRWYWNjaW5lLXZhbHVlcycNCnZhbHVlc2V0ICJUeTIxYSBDbGFzcyBUeXBob2lkIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L1R5MjFhQ2xhc3NUeXBob2lkVmFjY2luZS12YWx1ZXMnDQovLyAgTWVuQSB2YWNjaW5lIGNsYXNzZXMNCnZhbHVlc2V0ICJNZW5BIGNvbmp1Z2F0ZSB2YWNjaW5lICg1wrVnKSI6ICdodHRwOi8vZmhpci5vcmcvZ3VpZGVzL3doby9zbWFydC1pbW11bml6YXRpb24vVmFsdWVTZXQvTWVuQWNvbmp1Z2F0ZXZhY2NpbmUtdmFsdWVzJw0KdmFsdWVzZXQgIm1vbm92YWxlbnQgTWVuQyBjb25qdWdhdGUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L21vbm92YWxlbnRNZW5DY29uanVnYXRlLXZhbHVlcycNCnZhbHVlc2V0ICJRdWFkcml2YWxlbnQgY29uanVnYXRlIjogJ2h0dHA6Ly9maGlyLm9yZy9ndWlkZXMvd2hvL3NtYXJ0LWltbXVuaXphdGlvbi9WYWx1ZVNldC9RdWFkcml2YWxlbnRjb25qdWdhdGUtdmFsdWVzJw0KLy8gVEJFIGNsYXNzaWZpY2F0aW9ucyBvZiB2YWNjaW5lcw0KLy8gQXNzdW1wdGlvbjogQ2xhc3NpZmljYXRpb25zIG9mIFRCRSB2YWNjaW5lIGNhbiBiZSBjb2RpZmllZCB1c2luZyBzb21lICh5ZXQgdG8gYmUgZGlzY292ZXJlZCkgY29kZSBzeXN0ZW0gLSBwb3NzaWJseSB1c2luZyBHVElOIG9uIHRoZSBwcm9kdWN0Pw0KdmFsdWVzZXQgIkZTTUUtSW1tdW4gQ2xhc3MgVEJFIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L0ZTTUUtSW1tdW5DbGFzc1RCRVZhY2NpbmUtdmFsdWVzJw0KdmFsdWVzZXQgIlRCRS1Nb3Njb3cgQ2xhc3MgVEJFIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L1RCRS1Nb3Njb3dDbGFzc1RCRVZhY2NpbmUtdmFsdWVzJw0KdmFsdWVzZXQgIkVuY2VWaXIgQ2xhc3MgVEJFIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L0VuY2VWaXJDbGFzc1RCRVZhY2NpbmUtdmFsdWVzJw0KdmFsdWVzZXQgIkVuY2VwdXIgQ2xhc3MgVEJFIFZhY2NpbmUiOiAnaHR0cDovL2ZoaXIub3JnL2d1aWRlcy93aG8vc21hcnQtaW1tdW5pemF0aW9uL1ZhbHVlU2V0L0VuY2VwdXJDbGFzc1RCRVZhY2NpbmUtdmFsdWVzJw0K"
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}