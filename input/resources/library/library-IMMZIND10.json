{
  "resourceType": "Library",
  "id": "library-IMMZIND10",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/smart-immunization/Library/IMMZIND10",
  "name": "IMMZIND10",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCom",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZc",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZConcepts"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCon",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZConfig"
  }, {
    "type": "depends-on",
    "display": "Library IMMZIndCom",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZIndicatorCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZvl",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZVaccineLibrary"
  }, {
    "type": "depends-on",
    "display": "Library FC",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/FHIRCommon"
  }, {
    "type": "depends-on",
    "display": "Code system ISO-8601-Derived Periods",
    "resource": "http://ohie.org/CodeSystem/iso-8601-derived-periods"
  }, {
    "type": "depends-on",
    "display": "Value set Meningococcal Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunize/ValueSet/IMMZ.A1.DE10"
  } ],
  "parameter": [ {
    "name": "Measurement Period",
    "use": "in",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "measure-population",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Dose Sequence Stratifier",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Age Group Stratifier",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Coding"
  }, {
    "name": "Geographic Region Stratifier",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Administrative Gender Stratifier",
    "use": "out",
    "min": 0,
    "max": "1"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "mustSupport": [ "protocolApplied.doseNumber", "protocolApplied", "occurrence", "vaccineCode", "status" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "LyoKICogTGlicmFyeTogSU1NWi5JTkQuMTAKICogSW1tdW5pemF0aW9uIGNvdmVyYWdlIGZvciBNZW5pbmdvY29jY2FsIGNvbnRhaW5pbmcgdmFjY2luZSAoRXN0aW1hdGVkIERlbm9taW5hdG9yKSAKICogQ29tcGFyZXMgdGhlIGFkbWluaXN0ZXJlZCBkb3NlcyBvZiBtZW5pbmdvY29jY2FsIGNvbnRhaW5pbmcgdmFjY2luZSB3aXRoIHRoZSBudW1iZXIgb2YgZXN0aW1hdGVkIHN1cnZpdmluZyBpbmZhbnRzIGV4cHJlc3NlZCBhcyBhIHBlcmNlbnRhZ2UuIAogKiAKICogTnVtZXJhdG9yOiBOdW1iZXIgb2YgYWRtaW5pc3RyYXRpb25zIG9mIHZhY2NpbmVzIGNvbnRhaW5pbmcgYW4gTWVuaW5nb2NvY2NhbCBjb21wb25lbnQgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QgCiAqIE51bWVyYXRvciBDb21wdXRhdGlvbjogQ09VTlQgaW1tdW5pemF0aW9uIGV2ZW50cyBXSEVSRSBhZG1pbmlzdGVyZWQgcHJvZHVjdCBpcyAgYSBNZW5pbmdvY29jY2FsIHZhY2NpbmUgKElNTVouQTEuREUxMCkgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QKICogRGVub21pbmF0b3I6IEVzdGltYXRlZCBudW1iZXIgb2Ygc3Vydml2aW5nIGluZmFudHMKICogRGVub21pbmF0b3IgQ29tcHV0YXRpb246IFBBUkFNRVRFUiBudW1iZXIgb2Ygc3Vydml2aW5nIGluZmFudHMKICogCiAqIERpc2FnZ3JlZ2F0aW9uOgogKiAgIC0gRG9zZSBTZXF1ZW5jZSAoMSwgMikKICogICAtIEFnZSBHcm91cCAoPCAxIHllYXIgb3IgPiAxIHllYXIpCiAqICAgLSBHZW9ncmFwaGljIFJlZ2lvbiAKICogICAtIEFkbWluaXN0cmF0aXZlIEdlbmRlciAob3IgQmlvbG9naWNhbCBTZXgpCiAqIAogKiBSZWZlcmVuY2VzOiBXSE8gSW1tdW5pemF0aW9uIEZhY2lsaXR5IEFuYWx5c2lzIEd1aWRlICgxKSwgV0hPIC8gVU5JQ0VGIEpvaW50IFJlcG9ydGluZyBGb3JtICgzIC0gZWxlbWVudCA0MjgwKQogKi8KCmxpYnJhcnkgSU1NWklORDEwCgovLyBTdGFydCBTa2VsZXRvbiBDUUwKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScKaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMScKaW5jbHVkZSBJTU1aQ29tbW9uIGNhbGxlZCBJTU1aQ29tCmluY2x1ZGUgSU1NWkNvbmNlcHRzIGNhbGxlZCBJTU1aYwppbmNsdWRlIElNTVpDb25maWcgY2FsbGVkIElNTVpDb24KaW5jbHVkZSBJTU1aSW5kaWNhdG9yQ29tbW9uIGNhbGxlZCBJTU1aSW5kQ29tCmluY2x1ZGUgSU1NWlZhY2NpbmVMaWJyYXJ5IGNhbGxlZCBJTU1admwKaW5jbHVkZSBGSElSQ29tbW9uIGNhbGxlZCBGQwovLyBFbmQgU2tlbGV0b24gQ1FMCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlPgoKY29udGV4dCBQYXRpZW50CgovKgogKiBOdW1lcmF0b3I6IE51bWJlciBvZiBhZG1pbmlzdHJhdGlvbnMgb2YgdmFjY2luZXMgY29udGFpbmluZyBhbiBNZW5pbmdvY29jY2FsIGNvbXBvbmVudCBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZAogKiBOdW1lcmF0b3IgQ29tcHV0YXRpb246IENPVU5UIGltbXVuaXphdGlvbiBldmVudHMgV0hFUkUgYWRtaW5pc3RlcmVkIHByb2R1Y3QgaXMgIGEgTWVuaW5nb2NvY2NhbCB2YWNjaW5lIChJTU1aLkExLkRFMTApIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kCiAqLwpkZWZpbmUgIm1lYXN1cmUtcG9wdWxhdGlvbiI6CglleGlzdHMoSU1NWkluZENvbS4iTWVuaW5nb2NvY2NhbCBEb3NlcyBBZG1pbmlzdGVyZWQgdG8gUGF0aWVudCBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIikgLy8gVE9ETzogV3JpdGUgbG9naWMgaGVyZSAKCi8qCiAqIERpc2FnZ3JlZ2F0b3I6IERvc2UgU2VxdWVuY2UgKDEsIDIpCiAqLwpkZWZpbmUgIkRvc2UgU2VxdWVuY2UgU3RyYXRpZmllciI6CglJTU1aSW5kQ29tLiJNZW5pbmdvY29jY2FsIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIEkKCXJldHVybiAoc2luZ2xldG9uIGZyb20gSS5wcm90b2NvbEFwcGxpZWQpLmRvc2VOdW1iZXIKLyoKICogRGlzYWdncmVnYXRvcjogQWdlIEdyb3VwICg8IDEgeWVhciwgPiAxIHllYXIpCiAqLwpkZWZpbmUgIkFnZSBHcm91cCBTdHJhdGlmaWVyIjoKCUlNTVpJbmRDb20uIkluZmFudCBCeSBBZ2UgU3RyYXRpZmllciIKCi8qCiAqIERpc2FnZ3JlZ2F0b3I6IEdlb2dyYXBoaWMgUmVnaW9uCiAqLwpkZWZpbmUgIkdlb2dyYXBoaWMgUmVnaW9uIFN0cmF0aWZpZXIiOgoJSU1NWkluZENvbS4iQnkgR2VvZ3JhcGhpYyBSZWdpb24gU3RyYXRpZmllciIKCi8qCiAqIERpc2FnZ3JlZ2F0b3I6IEFkbWluaXN0cmF0aXZlIEdlbmRlciAob3IgQmlvbG9naWNhbCBTZXgpCiAqLwpkZWZpbmUgIkFkbWluaXN0cmF0aXZlIEdlbmRlciBTdHJhdGlmaWVyIjoKCUlNTVpJbmRDb20uIkJ5IEFkbWluaXN0cmF0aXZlIEdlbmRlciBTdHJhdGlmaWVyIgoKLyogRW5kIG9mIElNTVouSU5ELjEwICovCg=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}