{
  "resourceType": "Library",
  "id": "library-IMMZIND21",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/smart-immunization/Library/IMMZIND21",
  "name": "IMMZIND21",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCom",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZc",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZConcepts"
  }, {
    "type": "depends-on",
    "display": "Library IMMZStratifiers",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZStratifiers"
  }, {
    "type": "depends-on",
    "display": "Library IMMZvl",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZVaccineLibrary"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCommonDataElements",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZCommonIzDataElements"
  }, {
    "type": "depends-on",
    "display": "Library WCom",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/WHOCommon"
  } ],
  "parameter": [ {
    "name": "Measurement Period",
    "use": "in",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "numerator",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "denominator",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Geographic Region Stratifier",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Location",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Location" ],
    "mustSupport": [ "address", "id" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "LyoKICogTGlicmFyeTogSU1NWi5JTkQuMjEKICogRHJvcG91dCBSYXRlIG9mIEJDRyB0byBNQ1YxIChUYXJnZXQgLyBSZXBvcnRlZCBDb2hvcnQpIAogKiBJbmRpY2F0ZXMgdGhlIGFnZ3JlZ2F0ZSBkcm9wb3V0IHJhdGUgb2YgY2hpbGRyZW4gd2hpY2ggaGF2ZSBiZWd1biB2YWNjaW5hdGlvbiAoYXQgYmlydGgsIEJDRyBpZiBnaXZlbikgd2l0aCBhZ2dyZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgbWVhc2xlcyBjb250YWluaW5nIHZhY2NpbmVzLiAKClRoZSBpbmRpY2F0b3IgY29tcGFyZXMgdGhlIG51bWJlciBvZiBhZG1pbmlzdHJhdGlvbiBvZiBCQ0cgbWludXMgdGhlIG51bWJlciBvZiBhZG1pbmlzdHJhdGlvbiBvZiBNQ1YxIGRpdmlkZWQgYnkgdGhlIG51bWJlciBvZiBCQ0cgdmFjY2luYXRpb25zIChCQ0cgLSBNQ1YxIC8gQkNHKQogKiAKICogTnVtZXJhdG9yOiBUaGUgbnVtYmVyIG9mIGRvc2VzIG9mIE1DVjEgYWRtaW5pc3RlcmVkIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kIG1pbnVzIHRoZSBudW1iZXIgb2YgQkNHIGRvc2VzIGFkbWluaXN0ZXJlZCBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZCAKICogTnVtZXJhdG9yIENvbXB1dGF0aW9uOiBDT1VOVCBpbW11bml6YXRpb24gZXZlbnRzIFdIRVJFIGFkbWluaXN0ZXJlZCBwcm9kdWN0IGlzIEJDRyAoSU1NWi5BMS5ERTEpICBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZApTVUJUUkFDVCAKQ09VTlQgaW1tdW5pemF0aW9uIGV2ZW50cyBXSEVSRSBhZG1pbmlzdGVyZWQgcHJvZHVjdCBpcyBtZWFzbGVzIGNvbnRhaW5pbmcgdmFjY2luZSAoSU1NWi5BMS5ERTkpIEFORCBkb3NlIHNlcXVlbmNlIGlzIDEgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QKICogRGVub21pbmF0b3I6IE51bWJlciBvZiBhZG1pbmlzdHJhdGlvbnMgb2YgQkNHIGFkbWluaXN0ZXJlZCBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZC4KICogRGVub21pbmF0b3IgQ29tcHV0YXRpb246IENPVU5UIGltbXVuaXphdGlvbiBldmVudHMgV0hFUkUgYWRtaW5pc3RlcmVkIHByb2R1Y3QgaXMgQkNHIChJTU1aLkExLkRFMSkgIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kCiAqIAogKiBEaXNhZ2dyZWdhdGlvbjoKICogICAtIEdlb2dyYXBoaWMgUmVnaW9uCiAqIAogKiBSZWZlcmVuY2VzOiBXSE8gSW1tdW5pemF0aW9uIEZhY2lsaXR5IEFuYWx5c2lzIEd1aWRlICgxKQogKi8KCmxpYnJhcnkgSU1NWklORDIxCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwoKaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMScKaW5jbHVkZSBJTU1aQ29tbW9uIGNhbGxlZCBJTU1aQ29tCmluY2x1ZGUgSU1NWkNvbmNlcHRzIGNhbGxlZCBJTU1aYwppbmNsdWRlIElNTVpTdHJhdGlmaWVycyBjYWxsZWQgSU1NWlN0cmF0aWZpZXJzCmluY2x1ZGUgSU1NWlZhY2NpbmVMaWJyYXJ5IGNhbGxlZCBJTU1admwKCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlPiBkZWZhdWx0IEludGVydmFsW0AyMDIyLTAxLTAxLCBAMjAyMi0wMS0zMV0KY29udGV4dCBQYXRpZW50CgovKgogKiBOdW1lcmF0b3I6IFRoZSBudW1iZXIgb2YgZG9zZXMgb2YgTUNWMSBhZG1pbmlzdGVyZWQgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QgbWludXMgdGhlIG51bWJlciBvZiBCQ0cgZG9zZXMgYWRtaW5pc3RlcmVkIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kCiAqIE51bWVyYXRvciBDb21wdXRhdGlvbjogQ09VTlQgaW1tdW5pemF0aW9uIGV2ZW50cyBXSEVSRSBhZG1pbmlzdGVyZWQgcHJvZHVjdCBpcyBCQ0cgKElNTVouQTEuREUxKSAgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QKU1VCVFJBQ1QgCkNPVU5UIGltbXVuaXphdGlvbiBldmVudHMgV0hFUkUgYWRtaW5pc3RlcmVkIHByb2R1Y3QgaXMgbWVhc2xlcyBjb250YWluaW5nIHZhY2NpbmUgKElNTVouQTEuREU5KSBBTkQgZG9zZSBzZXF1ZW5jZSBpcyAxIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kCiAqLwpkZWZpbmUgIm51bWVyYXRvciI6Cgl0cnVlIC8vIFRPRE86IFdyaXRlIGxvZ2ljIGhlcmUKLyoKICogRGVub21pbmF0b3I6IE51bWJlciBvZiBhZG1pbmlzdHJhdGlvbnMgb2YgQkNHIGFkbWluaXN0ZXJlZCBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZC4KICogRGVub21pbmF0b3IgQ29tcHV0YXRpb246IENPVU5UIGltbXVuaXphdGlvbiBldmVudHMgV0hFUkUgYWRtaW5pc3RlcmVkIHByb2R1Y3QgaXMgQkNHIChJTU1aLkExLkRFMSkgIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kCiAqLwpkZWZpbmUgImRlbm9taW5hdG9yIjoKCXRydWUgLy8gVE9ETzogV3JpdGUgbG9naWMgaGVyZQovKgogKiBEaXNhZ2dyZWdhdG9yOiBHZW9ncmFwaGljIFJlZ2lvbgogKi8KZGVmaW5lICJHZW9ncmFwaGljIFJlZ2lvbiBTdHJhdGlmaWVyIjoKCUlNTVpTdHJhdGlmaWVycy4iQnkgR2VvZ3JhcGhpYyBSZWdpb24gU3RyYXRpZmllciIKLyogRW5kIG9mIElNTVouSU5ELjIxICovCg=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}