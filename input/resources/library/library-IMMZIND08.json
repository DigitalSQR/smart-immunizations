{
  "resourceType": "Library",
  "id": "IMMZIND08",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/smart-immunization/Library/IMMZIND08",
  "name": "IMMZIND08",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library FHIRHelpers",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/FHIRHelpers|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCom",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZc",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZConcepts"
  }, {
    "type": "depends-on",
    "display": "Library IMMZCon",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZConfig"
  }, {
    "type": "depends-on",
    "display": "Library IMMZIndCom",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZIndicatorCommon"
  }, {
    "type": "depends-on",
    "display": "Library IMMZvl",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZVaccineLibrary"
  }, {
    "type": "depends-on",
    "display": "Library FC",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/FHIRCommon"
  }, {
    "type": "depends-on",
    "display": "Code system ISO-8601-Derived Periods",
    "resource": "http://ohie.org/CodeSystem/iso-8601-derived-periods"
  }, {
    "type": "depends-on",
    "display": "Value set MCV Vaccine",
    "resource": "http://fhir.org/guides/who/smart-immunization/ValueSet/IMMZ.A1.DE9"
  } ],
  "parameter": [ {
    "name": "Measurement Period",
    "use": "in",
    "min": 0,
    "max": "1",
    "type": "Period"
  }, {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "measure-population",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Dose Sequence  Stratifier",
    "use": "out",
    "min": 0,
    "max": "*",
    "type": "Any"
  }, {
    "name": "Age Group Stratifier",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Coding"
  }, {
    "name": "Geographic Region Stratifier",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "string"
  }, {
    "name": "Administrative Gender Stratifier",
    "use": "out",
    "min": 0,
    "max": "1"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  }, {
    "type": "Immunization",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Immunization" ],
    "mustSupport": [ "protocolApplied.doseNumber", "protocolApplied", "occurrence", "vaccineCode", "status" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "LyoKICogTGlicmFyeTogSU1NWi5JTkQuMDgKICogSW1tdW5pemF0aW9uIGNvdmVyYWdlIGZvciBNZWFzbGVzIGNvbnRhaW5pbmcgdmFjY2luZSAoRXN0aW1hdGVkIERlbm9taW5hdG9yKSAKICogQ29tcGFyZXMgdGhlIGFkbWluaXN0ZXJlZCBkb3NlcyBvZiBtZWFzbGVzIGNvbnRhaW5pbmcgdmFjY2luZXMgKE1DVikgd2l0aCB0aGUgZXN0aW1hdGVkIG51bWJlciBvZiBzdXJ2aXZpbmcgaW5mYW50cyAoaWYgZG9zZSAxKSBvciBhIGNvdW50cnkgc3VwcGxpZWQgZGVub21pbmF0b3IgKGlmIGRvc2UgMikgZXhwcmVzc2VkIGFzIGEgcGVyY2VudGFnZS4gCiAqIAogKiBOdW1lcmF0b3I6IE51bWJlciBvZiBhZG1pbmlzdHJhdGlvbnMgb2YgdmFjY2luYXRpb25zIGNvbnRhaW5pbmcgYSBNZWFzbGVzIGNvbXBvbmVudCBkdXJpbmcgcmVwb3J0aW5nIHBlcmlvZCAKICogTnVtZXJhdG9yIENvbXB1dGF0aW9uOiBDT1VOVCBpbW11bml6YXRpb24gZXZlbnRzIFdIRVJFIGFkbWluaXN0ZXJlZCBwcm9kdWN0IGlzIGEgTWVhc2xlcyB2YWNjaW5lIChJTU1aLkExLkRFOSkgZHVyaW5nIHJlcG9ydGluZyBwZXJpb2QKICogRGVub21pbmF0b3I6IEVzdGltYXRlZCBudW1iZXIgb2Ygc3Vydml2aW5nIGluZmFudHMgKGZvciBkb3NlIDEpIGFuZCBjb3VudHJ5IHN1cHBsaWVkIGRlbm9taW5hdG9yIGZvciBkb3NlIHNlcXVlbmNlIDIgKHNlZSBjb21tZW50cykKICogRGVub21pbmF0b3IgQ29tcHV0YXRpb246IFBBUkFNRVRFUiBudW1iZXIgb2Ygc3Vydml2aW5nIGluZmFudHMgKGlmIERvc2UgU2VxdWVuY2UgPSAxKSBvciBQQVJBTUVURVIgb2YgY291bnRyeSBzdXBwbGllZCBkZW5vbWluYXRvciAoaWYgRG9zZSBTZXF1ZW5jZSA9IDIpCiAqIAogKiBEaXNhZ2dyZWdhdGlvbjoKICogICAtIERvc2UgU2VxdWVuY2UgKDEsIDIpCiAqICAgLSBBZ2UgR3JvdXAgKDwgMSB5ZWFyIG9yID4gMSB5ZWFyKQogKiAgIC0gR2VvZ3JhcGhpYyBSZWdpb24KICogICAtIEFkbWluaXN0cmF0aXZlIEdlbmRlciAob3IgQmlvbG9naWNhbCBTZXgpCiAqIAogKiBSZWZlcmVuY2VzOiBXSE8gSW1tdW5pemF0aW9uIEZhY2lsaXR5IEFuYWx5c2lzIEd1aWRlICgxKSwgV0hPIC8gVU5JQ0VGIEpvaW50IFJlcG9ydGluZyBGb3JtICgzIC0gZWxlbWVudHMgNDI0MCBhbmQgNDI2MCApCiAqLwoKbGlicmFyeSBJTU1aSU5EMDgKCi8vIFN0YXJ0IFNrZWxldG9uIENRTAp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJwppbmNsdWRlIElNTVpDb21tb24gY2FsbGVkIElNTVpDb20KaW5jbHVkZSBJTU1aQ29uY2VwdHMgY2FsbGVkIElNTVpjCmluY2x1ZGUgSU1NWkNvbmZpZyBjYWxsZWQgSU1NWkNvbgppbmNsdWRlIElNTVpJbmRpY2F0b3JDb21tb24gY2FsbGVkIElNTVpJbmRDb20KaW5jbHVkZSBJTU1aVmFjY2luZUxpYnJhcnkgY2FsbGVkIElNTVp2bAppbmNsdWRlIEZISVJDb21tb24gY2FsbGVkIEZDCi8vIEVuZCBTa2VsZXRvbiBDUUwKcGFyYW1ldGVyICJNZWFzdXJlbWVudCBQZXJpb2QiIEludGVydmFsPERhdGU+Cgpjb250ZXh0IFBhdGllbnQKCi8qCiAqIE51bWVyYXRvcjogTnVtYmVyIG9mIGFkbWluaXN0cmF0aW9ucyBvZiB2YWNjaW5hdGlvbnMgY29udGFpbmluZyBhIE1lYXNsZXMgY29tcG9uZW50IGR1cmluZyByZXBvcnRpbmcgcGVyaW9kCiAqIE51bWVyYXRvciBDb21wdXRhdGlvbjogQ09VTlQgaW1tdW5pemF0aW9uIGV2ZW50cyBXSEVSRSBhZG1pbmlzdGVyZWQgcHJvZHVjdCBpcyBhIE1lYXNsZXMgdmFjY2luZSAoSU1NWi5BMS5ERTkpIGR1cmluZyByZXBvcnRpbmcgcGVyaW9kCiAqLwpkZWZpbmUgIm1lYXN1cmUtcG9wdWxhdGlvbiI6CglleGlzdHMoSU1NWkluZENvbS4iTUNWIERvc2VzIEFkbWluaXN0ZXJlZCB0byBQYXRpZW50IER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiKQoKLyoKICogRGlzYWdncmVnYXRvcjogRG9zZSBTZXF1ZW5jZSAoMSwgMikKICovCmRlZmluZSAiRG9zZSBTZXF1ZW5jZSAgU3RyYXRpZmllciI6CglJTU1aSW5kQ29tLiJNQ1YgRG9zZXMgQWRtaW5pc3RlcmVkIHRvIFBhdGllbnQgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgSQoJcmV0dXJuIChzaW5nbGV0b24gZnJvbSBJLnByb3RvY29sQXBwbGllZCkuZG9zZU51bWJlcgoKLyoKICogRGlzYWdncmVnYXRvcjogQWdlIEdyb3VwICg8MjRIIG9mIEJpcnRoLCA8IDIgd2Vla3MpCiAqLwpkZWZpbmUgIkFnZSBHcm91cCBTdHJhdGlmaWVyIjoKCUlNTVpJbmRDb20uIkluZmFudCBCeSBBZ2UgU3RyYXRpZmllciIKCi8qCiAqIERpc2FnZ3JlZ2F0b3I6IEdlb2dyYXBoaWMgUmVnaW9uCiAqLwpkZWZpbmUgIkdlb2dyYXBoaWMgUmVnaW9uIFN0cmF0aWZpZXIiOgoJSU1NWkluZENvbS4iQnkgR2VvZ3JhcGhpYyBSZWdpb24gU3RyYXRpZmllciIKCi8qCiAqIERpc2FnZ3JlZ2F0b3I6IEFkbWluaXN0cmF0aXZlIEdlbmRlciAob3IgQmlvbG9naWNhbCBTZXgpCiAqLwpkZWZpbmUgIkFkbWluaXN0cmF0aXZlIEdlbmRlciBTdHJhdGlmaWVyIjoKCUlNTVpJbmRDb20uIkJ5IEFkbWluaXN0cmF0aXZlIEdlbmRlciBTdHJhdGlmaWVyIgoKLyogRW5kIG9mIElNTVouSU5ELjA4ICovCg=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}