{
  "resourceType": "Library",
  "id": "IMMZConfig",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/who/smart-immunization/Library/IMMZConfig",
  "name": "IMMZConfig",
  "relatedArtifact": [ {
    "type": "depends-on",
    "display": "FHIR model information",
    "resource": "http://fhir.org/guides/cqf/common/Library/FHIR-ModelInfo|4.0.1"
  }, {
    "type": "depends-on",
    "display": "Library IMMZc",
    "resource": "http://fhir.org/guides/who/smart-immunization/Library/IMMZConcepts"
  } ],
  "parameter": [ {
    "name": "Patient",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "Patient"
  }, {
    "name": "High incidence of TB and/or high leprosy burden",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Polio-endemic country with high risk of spread",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Combined bOPV and IPV Schedule",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Sequential IPV-OPV Schedule",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country has a high risk of exposure to polio",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "High Coverage of Polio and Risk of Wild Importation",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "In a country where the peak burden of severe Hib disease occurs in young infants",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "In a setting where the greatest disease morbidity and mortality occur later, or whererate reductions of disease are not fully sustained after the routine use of Hib vaccine",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Hepatitis A endemic country",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is administering Live recombinant JE antigen",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is administering Live attentuated JE antigen",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is administering Inactivated Vero cell-derived JE antigen",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country recognizes JE as a health priority",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is following a 2 dose scheme for Pneumococcal",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is following a 3 dose scheme for Pneumococcal",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is not highly endemic for Hepatitis A",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is administering a Live attenuated HAV vaccine",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "In a setting with a high disease burden and mortality",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Region recommends Meningococcal vaccination",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Region recommends Cholera vaccination",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Region recommends Typhoid vaccination",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is administering the TCV vaccine",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is administering ViPS vaccine",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country is administering an Inactivated HAV vaccine",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "In a setting where the risk of measles among infants < 9 months of age remains high",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country currently has a measles outbreak",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Population is in conflict zones internally displaced populations and refugees",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "In a setting where there is high transmission of Measles",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "In a setting where there is low transmission of Measles",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country has Yellow Fever Endemic",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country recognizes TBE as a priority",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "There is a compelling reason to vaccinate infants with Meningococcal between 3 to 9 months old",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country recognizes Varicella an important public health burden",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  }, {
    "name": "Country recognizes MUMPS reduction as a public health priority",
    "use": "out",
    "min": 0,
    "max": "1",
    "type": "boolean"
  } ],
  "dataRequirement": [ {
    "type": "Patient",
    "profile": [ "http://hl7.org/fhir/StructureDefinition/Patient" ]
  } ],
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBJTU1aQ29uZmlnDQp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJw0KaW5jbHVkZSBJTU1aQ29uY2VwdHMgY2FsbGVkIElNTVpjDQoNCmNvbnRleHQgUGF0aWVudCANCg0KZGVmaW5lICJIaWdoIGluY2lkZW5jZSBvZiBUQiBhbmQvb3IgaGlnaCBsZXByb3N5IGJ1cmRlbiI6IHRydWUNCmRlZmluZSAiUG9saW8tZW5kZW1pYyBjb3VudHJ5IHdpdGggaGlnaCByaXNrIG9mIHNwcmVhZCI6IHRydWUNCmRlZmluZSAiQ29tYmluZWQgYk9QViBhbmQgSVBWIFNjaGVkdWxlIjogdHJ1ZQ0KZGVmaW5lICJTZXF1ZW50aWFsIElQVi1PUFYgU2NoZWR1bGUiOiB0cnVlDQpkZWZpbmUgIkNvdW50cnkgaGFzIGEgaGlnaCByaXNrIG9mIGV4cG9zdXJlIHRvIHBvbGlvIjogdHJ1ZQ0KZGVmaW5lICJIaWdoIENvdmVyYWdlIG9mIFBvbGlvIGFuZCBSaXNrIG9mIFdpbGQgSW1wb3J0YXRpb24iOiB0cnVlDQoNCmRlZmluZSAiSW4gYSBjb3VudHJ5IHdoZXJlIHRoZSBwZWFrIGJ1cmRlbiBvZiBzZXZlcmUgSGliIGRpc2Vhc2Ugb2NjdXJzIGluIHlvdW5nIGluZmFudHMiOnRydWUNCmRlZmluZSAiSW4gYSBzZXR0aW5nIHdoZXJlIHRoZSBncmVhdGVzdCBkaXNlYXNlIG1vcmJpZGl0eSBhbmQgbW9ydGFsaXR5IG9jY3VyIGxhdGVyLCBvciB3aGVyZXJhdGUgcmVkdWN0aW9ucyBvZiBkaXNlYXNlIGFyZSBub3QgZnVsbHkgc3VzdGFpbmVkIGFmdGVyIHRoZSByb3V0aW5lIHVzZSBvZiBIaWIgdmFjY2luZSI6IHRydWUNCmRlZmluZSAiSGVwYXRpdGlzIEEgZW5kZW1pYyBjb3VudHJ5IjogdHJ1ZQ0KDQpkZWZpbmUgIkNvdW50cnkgaXMgYWRtaW5pc3RlcmluZyBMaXZlIHJlY29tYmluYW50IEpFIGFudGlnZW4iOnRydWUNCmRlZmluZSAiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIExpdmUgYXR0ZW50dWF0ZWQgSkUgYW50aWdlbiI6IHRydWUNCmRlZmluZSAiQ291bnRyeSBpcyBhZG1pbmlzdGVyaW5nIEluYWN0aXZhdGVkIFZlcm8gY2VsbC1kZXJpdmVkIEpFIGFudGlnZW4iOiB0cnVlDQpkZWZpbmUgIkNvdW50cnkgcmVjb2duaXplcyBKRSBhcyBhIGhlYWx0aCBwcmlvcml0eSI6IHRydWUNCg0KZGVmaW5lICJDb3VudHJ5IGlzIGZvbGxvd2luZyBhIDIgZG9zZSBzY2hlbWUgZm9yIFBuZXVtb2NvY2NhbCI6IHRydWUNCmRlZmluZSAiQ291bnRyeSBpcyBmb2xsb3dpbmcgYSAzIGRvc2Ugc2NoZW1lIGZvciBQbmV1bW9jb2NjYWwiOiB0cnVlDQpkZWZpbmUgIkNvdW50cnkgaXMgbm90IGhpZ2hseSBlbmRlbWljIGZvciBIZXBhdGl0aXMgQSI6dHJ1ZQ0KZGVmaW5lICJDb3VudHJ5IGlzIGFkbWluaXN0ZXJpbmcgYSBMaXZlIGF0dGVudWF0ZWQgSEFWIHZhY2NpbmUiOiB0cnVlDQpkZWZpbmUgIkluIGEgc2V0dGluZyB3aXRoIGEgaGlnaCBkaXNlYXNlIGJ1cmRlbiBhbmQgbW9ydGFsaXR5IjogdHJ1ZQ0KDQpkZWZpbmUgIlJlZ2lvbiByZWNvbW1lbmRzIE1lbmluZ29jb2NjYWwgdmFjY2luYXRpb24iOiB0cnVlDQpkZWZpbmUgIlJlZ2lvbiByZWNvbW1lbmRzIENob2xlcmEgdmFjY2luYXRpb24iOiB0cnVlDQpkZWZpbmUgIlJlZ2lvbiByZWNvbW1lbmRzIFR5cGhvaWQgdmFjY2luYXRpb24iOiB0cnVlDQpkZWZpbmUgIkNvdW50cnkgaXMgYWRtaW5pc3RlcmluZyB0aGUgVENWIHZhY2NpbmUiOiB0cnVlDQpkZWZpbmUgIkNvdW50cnkgaXMgYWRtaW5pc3RlcmluZyBWaVBTIHZhY2NpbmUiOiB0cnVlDQpkZWZpbmUgIkNvdW50cnkgaXMgYWRtaW5pc3RlcmluZyBhbiBJbmFjdGl2YXRlZCBIQVYgdmFjY2luZSI6IHRydWUNCmRlZmluZSAiSW4gYSBzZXR0aW5nIHdoZXJlIHRoZSByaXNrIG9mIG1lYXNsZXMgYW1vbmcgaW5mYW50cyA8IDkgbW9udGhzIG9mIGFnZSByZW1haW5zIGhpZ2giOiBmYWxzZQ0KZGVmaW5lICJDb3VudHJ5IGN1cnJlbnRseSBoYXMgYSBtZWFzbGVzIG91dGJyZWFrIjogZmFsc2UNCmRlZmluZSAiUG9wdWxhdGlvbiBpcyBpbiBjb25mbGljdCB6b25lcyBpbnRlcm5hbGx5IGRpc3BsYWNlZCBwb3B1bGF0aW9ucyBhbmQgcmVmdWdlZXMiOiBmYWxzZQ0KZGVmaW5lICJJbiBhIHNldHRpbmcgd2hlcmUgdGhlcmUgaXMgaGlnaCB0cmFuc21pc3Npb24gb2YgTWVhc2xlcyI6ZmFsc2UNCmRlZmluZSAiSW4gYSBzZXR0aW5nIHdoZXJlIHRoZXJlIGlzIGxvdyB0cmFuc21pc3Npb24gb2YgTWVhc2xlcyI6ZmFsc2UNCg0KZGVmaW5lICJDb3VudHJ5IGhhcyBZZWxsb3cgRmV2ZXIgRW5kZW1pYyI6IGZhbHNlDQpkZWZpbmUgIkNvdW50cnkgcmVjb2duaXplcyBUQkUgYXMgYSBwcmlvcml0eSI6IHRydWUNCg0KZGVmaW5lICJUaGVyZSBpcyBhIGNvbXBlbGxpbmcgcmVhc29uIHRvIHZhY2NpbmF0ZSBpbmZhbnRzIHdpdGggTWVuaW5nb2NvY2NhbCBiZXR3ZWVuIDMgdG8gOSBtb250aHMgb2xkIjogdHJ1ZQ0KZGVmaW5lICJDb3VudHJ5IHJlY29nbml6ZXMgVmFyaWNlbGxhIGFuIGltcG9ydGFudCBwdWJsaWMgaGVhbHRoIGJ1cmRlbiI6IHRydWUNCmRlZmluZSAiQ291bnRyeSByZWNvZ25pemVzIE1VTVBTIHJlZHVjdGlvbiBhcyBhIHB1YmxpYyBoZWFsdGggcHJpb3JpdHkiOiB0cnVlDQovLyBUT0RPOiANCi8vZGVmaW5lICJiT1BWIGFuZCBJUFYgU2NoZWR1bGUiOg0KLy8JJ2NvbWJpbmVkJw0KCS8vJ3NlcXVlbnRpYWwnOw0KDQoNCg=="
  }, {
    "contentType": "application/elm+xml",
    "data": ""
  }, {
    "contentType": "application/elm+json",
    "data": ""
  } ]
}